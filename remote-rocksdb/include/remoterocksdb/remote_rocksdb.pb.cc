// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_rocksdb.proto

#include "remote_rocksdb.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace remoterocksdb {
template <typename>
PROTOBUF_CONSTEXPR Op::Op(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edits_)*/{}
  , /*decltype(_impl_.ops_)*/{}
  , /*decltype(_impl_.time_)*/ ::int64_t{0}

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpDefaultTypeInternal() {}
  union {
    Op _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpDefaultTypeInternal _Op_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OpReply::OpReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replies_)*/{}
  , /*decltype(_impl_.time_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpReplyDefaultTypeInternal() {}
  union {
    OpReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpReplyDefaultTypeInternal _OpReply_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SingleOp::SingleOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.op_ptr_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.reply_ptr_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.record_cnt_)*/ 0

  , /*decltype(_impl_.keynum_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleOpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleOpDefaultTypeInternal() {}
  union {
    SingleOp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleOpDefaultTypeInternal _SingleOp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SingleOpReply::SingleOpReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scanned_values_)*/{}
  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ok_)*/ false

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_.keynum_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingleOpReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleOpReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleOpReplyDefaultTypeInternal() {}
  union {
    SingleOpReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleOpReplyDefaultTypeInternal _SingleOpReply_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OpReplies::OpReplies(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reply_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OpRepliesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OpRepliesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OpRepliesDefaultTypeInternal() {}
  union {
    OpReplies _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OpRepliesDefaultTypeInternal _OpReplies_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Reply::Reply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ok_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReplyDefaultTypeInternal() {}
  union {
    Reply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReplyDefaultTypeInternal _Reply_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace remoterocksdb
static ::_pb::Metadata file_level_metadata_remote_5frocksdb_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_remote_5frocksdb_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_remote_5frocksdb_2eproto = nullptr;
const ::uint32_t TableStruct_remote_5frocksdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Op, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Op, _impl_.edits_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Op, _impl_.ops_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Op, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Op, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::OpReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::OpReply, _impl_.replies_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::OpReply, _impl_.time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _impl_.op_ptr_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _impl_.reply_ptr_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _impl_.keynum_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOp, _impl_.record_cnt_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.ok_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.keynum_),
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::SingleOpReply, _impl_.scanned_values_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::OpReplies, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::OpReplies, _impl_.reply_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Reply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Reply, _impl_.ok_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::remoterocksdb::Empty, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::remoterocksdb::Op)},
        { 12, -1, -1, sizeof(::remoterocksdb::OpReply)},
        { 22, -1, -1, sizeof(::remoterocksdb::SingleOp)},
        { 37, -1, -1, sizeof(::remoterocksdb::SingleOpReply)},
        { 53, -1, -1, sizeof(::remoterocksdb::OpReplies)},
        { 62, -1, -1, sizeof(::remoterocksdb::Reply)},
        { 71, -1, -1, sizeof(::remoterocksdb::Empty)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::remoterocksdb::_Op_default_instance_._instance,
    &::remoterocksdb::_OpReply_default_instance_._instance,
    &::remoterocksdb::_SingleOp_default_instance_._instance,
    &::remoterocksdb::_SingleOpReply_default_instance_._instance,
    &::remoterocksdb::_OpReplies_default_instance_._instance,
    &::remoterocksdb::_Reply_default_instance_._instance,
    &::remoterocksdb::_Empty_default_instance_._instance,
};
const char descriptor_table_protodef_remote_5frocksdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024remote_rocksdb.proto\022\rremoterocksdb\"S\n"
    "\002Op\022\r\n\005edits\030\001 \003(\t\022$\n\003ops\030\002 \003(\0132\027.remote"
    "rocksdb.SingleOp\022\014\n\004time\030\003 \001(\003\022\n\n\002id\030\004 \001"
    "(\005\"F\n\007OpReply\022-\n\007replies\030\001 \003(\0132\034.remoter"
    "ocksdb.SingleOpReply\022\014\n\004time\030\002 \001(\003\"\222\001\n\010S"
    "ingleOp\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022#\n\004t"
    "ype\030\003 \001(\0162\025.remoterocksdb.OpType\022\016\n\006op_p"
    "tr\030\004 \001(\004\022\021\n\treply_ptr\030\005 \001(\004\022\016\n\006keynum\030\006 "
    "\001(\003\022\022\n\nrecord_cnt\030\007 \001(\005\"\240\001\n\rSingleOpRepl"
    "y\022\n\n\002ok\030\001 \001(\010\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001("
    "\t\022\016\n\006status\030\004 \001(\t\022\n\n\002Id\030\005 \001(\003\022#\n\004type\030\006 "
    "\001(\0162\025.remoterocksdb.OpType\022\016\n\006keynum\030\010 \001"
    "(\003\022\026\n\016scanned_values\030\t \003(\t\"2\n\tOpReplies\022"
    "%\n\005reply\030\001 \003(\0132\026.remoterocksdb.OpReply\"\023"
    "\n\005Reply\022\n\n\002ok\030\001 \001(\010\"\007\n\005Empty*<\n\006OpType\022\007"
    "\n\003GET\020\000\022\007\n\003PUT\020\001\022\n\n\006DELETE\020\002\022\n\n\006UPDATE\020\003"
    "\022\010\n\004SCAN\020\0042O\n\024RemoteRocksDBService\0227\n\004Do"
    "Op\022\021.remoterocksdb.Op\032\026.remoterocksdb.Op"
    "Reply\"\000(\0010\001B#\n\tsite.ycsbB\rRemoteRocksDBP"
    "\001\242\002\004RRDBb\006proto3"
};
static ::absl::once_flag descriptor_table_remote_5frocksdb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_remote_5frocksdb_2eproto = {
    false,
    false,
    776,
    descriptor_table_protodef_remote_5frocksdb_2eproto,
    "remote_rocksdb.proto",
    &descriptor_table_remote_5frocksdb_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_remote_5frocksdb_2eproto::offsets,
    file_level_metadata_remote_5frocksdb_2eproto,
    file_level_enum_descriptors_remote_5frocksdb_2eproto,
    file_level_service_descriptors_remote_5frocksdb_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_remote_5frocksdb_2eproto_getter() {
  return &descriptor_table_remote_5frocksdb_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_remote_5frocksdb_2eproto(&descriptor_table_remote_5frocksdb_2eproto);
namespace remoterocksdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_5frocksdb_2eproto);
  return file_level_enum_descriptors_remote_5frocksdb_2eproto[0];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Op::_Internal {
 public:
};

Op::Op(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:remoterocksdb.Op)
}
Op::Op(const Op& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Op* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edits_){from._impl_.edits_}
    , decltype(_impl_.ops_){from._impl_.ops_}
    , decltype(_impl_.time_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:remoterocksdb.Op)
}

inline void Op::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.edits_){arena}
    , decltype(_impl_.ops_){arena}
    , decltype(_impl_.time_) { ::int64_t{0} }

    , decltype(_impl_.id_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Op::~Op() {
  // @@protoc_insertion_point(destructor:remoterocksdb.Op)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Op::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_edits()->~RepeatedPtrField();
  _internal_mutable_ops()->~RepeatedPtrField();
}

void Op::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Op::Clear() {
// @@protoc_insertion_point(message_clear_start:remoterocksdb.Op)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_edits()->Clear();
  _internal_mutable_ops()->Clear();
  ::memset(&_impl_.time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Op::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string edits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_edits();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "remoterocksdb.Op.edits"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .remoterocksdb.SingleOp ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Op::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remoterocksdb.Op)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string edits = 1;
  for (int i = 0, n = this->_internal_edits_size(); i < n; ++i) {
    const auto& s = this->_internal_edits(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "remoterocksdb.Op.edits");
    target = stream->WriteString(1, s, target);
  }

  // repeated .remoterocksdb.SingleOp ops = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ops_size()); i < n; i++) {
    const auto& repfield = this->_internal_ops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 time = 3;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_time(), target);
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remoterocksdb.Op)
  return target;
}

::size_t Op::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remoterocksdb.Op)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string edits = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_edits().size());
  for (int i = 0, n = _internal_edits().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_edits().Get(i));
  }

  // repeated .remoterocksdb.SingleOp ops = 2;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->_internal_ops()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 time = 3;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_time());
  }

  // int32 id = 4;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Op::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Op::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Op::GetClassData() const { return &_class_data_; }


void Op::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Op*>(&to_msg);
  auto& from = static_cast<const Op&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remoterocksdb.Op)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_edits()->MergeFrom(from._internal_edits());
  _this->_internal_mutable_ops()->MergeFrom(from._internal_ops());
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Op::CopyFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remoterocksdb.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Op::IsInitialized() const {
  return true;
}

void Op::InternalSwap(Op* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_edits()->InternalSwap(
      other->_internal_mutable_edits());
  _internal_mutable_ops()->InternalSwap(other->_internal_mutable_ops());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Op, _impl_.id_)
      + sizeof(Op::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Op, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Op::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_5frocksdb_2eproto_getter, &descriptor_table_remote_5frocksdb_2eproto_once,
      file_level_metadata_remote_5frocksdb_2eproto[0]);
}
// ===================================================================

class OpReply::_Internal {
 public:
};

OpReply::OpReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:remoterocksdb.OpReply)
}
OpReply::OpReply(const OpReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replies_){from._impl_.replies_}
    , decltype(_impl_.time_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:remoterocksdb.OpReply)
}

inline void OpReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.replies_){arena}
    , decltype(_impl_.time_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpReply::~OpReply() {
  // @@protoc_insertion_point(destructor:remoterocksdb.OpReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_replies()->~RepeatedPtrField();
}

void OpReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remoterocksdb.OpReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_replies()->Clear();
  _impl_.time_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .remoterocksdb.SingleOpReply replies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OpReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remoterocksdb.OpReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .remoterocksdb.SingleOpReply replies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_replies_size()); i < n; i++) {
    const auto& repfield = this->_internal_replies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remoterocksdb.OpReply)
  return target;
}

::size_t OpReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remoterocksdb.OpReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remoterocksdb.SingleOpReply replies = 1;
  total_size += 1UL * this->_internal_replies_size();
  for (const auto& msg : this->_internal_replies()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpReply::GetClassData() const { return &_class_data_; }


void OpReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpReply*>(&to_msg);
  auto& from = static_cast<const OpReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remoterocksdb.OpReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_replies()->MergeFrom(from._internal_replies());
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpReply::CopyFrom(const OpReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remoterocksdb.OpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpReply::IsInitialized() const {
  return true;
}

void OpReply::InternalSwap(OpReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_replies()->InternalSwap(other->_internal_mutable_replies());

  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_5frocksdb_2eproto_getter, &descriptor_table_remote_5frocksdb_2eproto_once,
      file_level_metadata_remote_5frocksdb_2eproto[1]);
}
// ===================================================================

class SingleOp::_Internal {
 public:
};

SingleOp::SingleOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:remoterocksdb.SingleOp)
}
SingleOp::SingleOp(const SingleOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.op_ptr_) {}

    , decltype(_impl_.reply_ptr_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.record_cnt_) {}

    , decltype(_impl_.keynum_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.op_ptr_, &from._impl_.op_ptr_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.keynum_) -
    reinterpret_cast<char*>(&_impl_.op_ptr_)) + sizeof(_impl_.keynum_));
  // @@protoc_insertion_point(copy_constructor:remoterocksdb.SingleOp)
}

inline void SingleOp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.op_ptr_) { ::uint64_t{0u} }

    , decltype(_impl_.reply_ptr_) { ::uint64_t{0u} }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.record_cnt_) { 0 }

    , decltype(_impl_.keynum_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleOp::~SingleOp() {
  // @@protoc_insertion_point(destructor:remoterocksdb.SingleOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleOp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void SingleOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleOp::Clear() {
// @@protoc_insertion_point(message_clear_start:remoterocksdb.SingleOp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  ::memset(&_impl_.op_ptr_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.keynum_) -
      reinterpret_cast<char*>(&_impl_.op_ptr_)) + sizeof(_impl_.keynum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remoterocksdb.SingleOp.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remoterocksdb.SingleOp.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .remoterocksdb.OpType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remoterocksdb::OpType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 op_ptr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.op_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 reply_ptr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.reply_ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 keynum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.keynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 record_cnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.record_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SingleOp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remoterocksdb.SingleOp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "remoterocksdb.SingleOp.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "remoterocksdb.SingleOp.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .remoterocksdb.OpType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // uint64 op_ptr = 4;
  if (this->_internal_op_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_op_ptr(), target);
  }

  // uint64 reply_ptr = 5;
  if (this->_internal_reply_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_reply_ptr(), target);
  }

  // int64 keynum = 6;
  if (this->_internal_keynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_keynum(), target);
  }

  // int32 record_cnt = 7;
  if (this->_internal_record_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_record_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remoterocksdb.SingleOp)
  return target;
}

::size_t SingleOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remoterocksdb.SingleOp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  // uint64 op_ptr = 4;
  if (this->_internal_op_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_op_ptr());
  }

  // uint64 reply_ptr = 5;
  if (this->_internal_reply_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_reply_ptr());
  }

  // .remoterocksdb.OpType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 record_cnt = 7;
  if (this->_internal_record_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_record_cnt());
  }

  // int64 keynum = 6;
  if (this->_internal_keynum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_keynum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleOp::GetClassData() const { return &_class_data_; }


void SingleOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleOp*>(&to_msg);
  auto& from = static_cast<const SingleOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remoterocksdb.SingleOp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_op_ptr() != 0) {
    _this->_internal_set_op_ptr(from._internal_op_ptr());
  }
  if (from._internal_reply_ptr() != 0) {
    _this->_internal_set_reply_ptr(from._internal_reply_ptr());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_record_cnt() != 0) {
    _this->_internal_set_record_cnt(from._internal_record_cnt());
  }
  if (from._internal_keynum() != 0) {
    _this->_internal_set_keynum(from._internal_keynum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleOp::CopyFrom(const SingleOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remoterocksdb.SingleOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleOp::IsInitialized() const {
  return true;
}

void SingleOp::InternalSwap(SingleOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleOp, _impl_.keynum_)
      + sizeof(SingleOp::_impl_.keynum_)
      - PROTOBUF_FIELD_OFFSET(SingleOp, _impl_.op_ptr_)>(
          reinterpret_cast<char*>(&_impl_.op_ptr_),
          reinterpret_cast<char*>(&other->_impl_.op_ptr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_5frocksdb_2eproto_getter, &descriptor_table_remote_5frocksdb_2eproto_once,
      file_level_metadata_remote_5frocksdb_2eproto[2]);
}
// ===================================================================

class SingleOpReply::_Internal {
 public:
};

SingleOpReply::SingleOpReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:remoterocksdb.SingleOpReply)
}
SingleOpReply::SingleOpReply(const SingleOpReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleOpReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scanned_values_){from._impl_.scanned_values_}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.ok_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.keynum_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ok_, &from._impl_.ok_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.keynum_) -
    reinterpret_cast<char*>(&_impl_.ok_)) + sizeof(_impl_.keynum_));
  // @@protoc_insertion_point(copy_constructor:remoterocksdb.SingleOpReply)
}

inline void SingleOpReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.scanned_values_){arena}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.ok_) { false }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.id_) { ::int64_t{0} }

    , decltype(_impl_.keynum_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleOpReply::~SingleOpReply() {
  // @@protoc_insertion_point(destructor:remoterocksdb.SingleOpReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleOpReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_scanned_values()->~RepeatedPtrField();
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  _impl_.status_.Destroy();
}

void SingleOpReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleOpReply::Clear() {
// @@protoc_insertion_point(message_clear_start:remoterocksdb.SingleOpReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_scanned_values()->Clear();
  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.ok_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.keynum_) -
      reinterpret_cast<char*>(&_impl_.ok_)) + sizeof(_impl_.keynum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleOpReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remoterocksdb.SingleOpReply.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remoterocksdb.SingleOpReply.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "remoterocksdb.SingleOpReply.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 Id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .remoterocksdb.OpType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::remoterocksdb::OpType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 keynum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.keynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string scanned_values = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scanned_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "remoterocksdb.SingleOpReply.scanned_values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SingleOpReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remoterocksdb.SingleOpReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_ok(), target);
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "remoterocksdb.SingleOpReply.key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "remoterocksdb.SingleOpReply.value");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "remoterocksdb.SingleOpReply.status");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int64 Id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_id(), target);
  }

  // .remoterocksdb.OpType type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_type(), target);
  }

  // int64 keynum = 8;
  if (this->_internal_keynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_keynum(), target);
  }

  // repeated string scanned_values = 9;
  for (int i = 0, n = this->_internal_scanned_values_size(); i < n; ++i) {
    const auto& s = this->_internal_scanned_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "remoterocksdb.SingleOpReply.scanned_values");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remoterocksdb.SingleOpReply)
  return target;
}

::size_t SingleOpReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remoterocksdb.SingleOpReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scanned_values = 9;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_scanned_values().size());
  for (int i = 0, n = _internal_scanned_values().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_scanned_values().Get(i));
  }

  // string key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  // string status = 4;
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 2;
  }

  // .remoterocksdb.OpType type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int64 Id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int64 keynum = 8;
  if (this->_internal_keynum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_keynum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleOpReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleOpReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleOpReply::GetClassData() const { return &_class_data_; }


void SingleOpReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleOpReply*>(&to_msg);
  auto& from = static_cast<const SingleOpReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remoterocksdb.SingleOpReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scanned_values()->MergeFrom(from._internal_scanned_values());
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_keynum() != 0) {
    _this->_internal_set_keynum(from._internal_keynum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleOpReply::CopyFrom(const SingleOpReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remoterocksdb.SingleOpReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleOpReply::IsInitialized() const {
  return true;
}

void SingleOpReply::InternalSwap(SingleOpReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_scanned_values()->InternalSwap(
      other->_internal_mutable_scanned_values());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleOpReply, _impl_.keynum_)
      + sizeof(SingleOpReply::_impl_.keynum_)
      - PROTOBUF_FIELD_OFFSET(SingleOpReply, _impl_.ok_)>(
          reinterpret_cast<char*>(&_impl_.ok_),
          reinterpret_cast<char*>(&other->_impl_.ok_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleOpReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_5frocksdb_2eproto_getter, &descriptor_table_remote_5frocksdb_2eproto_once,
      file_level_metadata_remote_5frocksdb_2eproto[3]);
}
// ===================================================================

class OpReplies::_Internal {
 public:
};

OpReplies::OpReplies(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:remoterocksdb.OpReplies)
}
OpReplies::OpReplies(const OpReplies& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OpReplies* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reply_){from._impl_.reply_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remoterocksdb.OpReplies)
}

inline void OpReplies::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.reply_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OpReplies::~OpReplies() {
  // @@protoc_insertion_point(destructor:remoterocksdb.OpReplies)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OpReplies::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_reply()->~RepeatedPtrField();
}

void OpReplies::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OpReplies::Clear() {
// @@protoc_insertion_point(message_clear_start:remoterocksdb.OpReplies)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_reply()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpReplies::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .remoterocksdb.OpReply reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OpReplies::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remoterocksdb.OpReplies)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .remoterocksdb.OpReply reply = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reply_size()); i < n; i++) {
    const auto& repfield = this->_internal_reply(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remoterocksdb.OpReplies)
  return target;
}

::size_t OpReplies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remoterocksdb.OpReplies)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .remoterocksdb.OpReply reply = 1;
  total_size += 1UL * this->_internal_reply_size();
  for (const auto& msg : this->_internal_reply()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpReplies::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OpReplies::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpReplies::GetClassData() const { return &_class_data_; }


void OpReplies::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OpReplies*>(&to_msg);
  auto& from = static_cast<const OpReplies&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remoterocksdb.OpReplies)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_reply()->MergeFrom(from._internal_reply());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpReplies::CopyFrom(const OpReplies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remoterocksdb.OpReplies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpReplies::IsInitialized() const {
  return true;
}

void OpReplies::InternalSwap(OpReplies* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_reply()->InternalSwap(other->_internal_mutable_reply());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpReplies::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_5frocksdb_2eproto_getter, &descriptor_table_remote_5frocksdb_2eproto_once,
      file_level_metadata_remote_5frocksdb_2eproto[4]);
}
// ===================================================================

class Reply::_Internal {
 public:
};

Reply::Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:remoterocksdb.Reply)
}
Reply::Reply(const Reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remoterocksdb.Reply)
}

inline void Reply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ok_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:remoterocksdb.Reply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Reply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:remoterocksdb.Reply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Reply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:remoterocksdb.Reply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:remoterocksdb.Reply)
  return target;
}

::size_t Reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:remoterocksdb.Reply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->_internal_ok() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reply::GetClassData() const { return &_class_data_; }


void Reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reply*>(&to_msg);
  auto& from = static_cast<const Reply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:remoterocksdb.Reply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:remoterocksdb.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  return true;
}

void Reply::InternalSwap(Reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.ok_, other->_impl_.ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_5frocksdb_2eproto_getter, &descriptor_table_remote_5frocksdb_2eproto_once,
      file_level_metadata_remote_5frocksdb_2eproto[5]);
}
// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:remoterocksdb.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:remoterocksdb.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_remote_5frocksdb_2eproto_getter, &descriptor_table_remote_5frocksdb_2eproto_once,
      file_level_metadata_remote_5frocksdb_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace remoterocksdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::remoterocksdb::Op*
Arena::CreateMaybeMessage< ::remoterocksdb::Op >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remoterocksdb::Op >(arena);
}
template<> PROTOBUF_NOINLINE ::remoterocksdb::OpReply*
Arena::CreateMaybeMessage< ::remoterocksdb::OpReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remoterocksdb::OpReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remoterocksdb::SingleOp*
Arena::CreateMaybeMessage< ::remoterocksdb::SingleOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remoterocksdb::SingleOp >(arena);
}
template<> PROTOBUF_NOINLINE ::remoterocksdb::SingleOpReply*
Arena::CreateMaybeMessage< ::remoterocksdb::SingleOpReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remoterocksdb::SingleOpReply >(arena);
}
template<> PROTOBUF_NOINLINE ::remoterocksdb::OpReplies*
Arena::CreateMaybeMessage< ::remoterocksdb::OpReplies >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remoterocksdb::OpReplies >(arena);
}
template<> PROTOBUF_NOINLINE ::remoterocksdb::Reply*
Arena::CreateMaybeMessage< ::remoterocksdb::Reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remoterocksdb::Reply >(arena);
}
template<> PROTOBUF_NOINLINE ::remoterocksdb::Empty*
Arena::CreateMaybeMessage< ::remoterocksdb::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::remoterocksdb::Empty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
